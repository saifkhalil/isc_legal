# Generated by Django 4.1.3 on 2023-01-15 20:32

from django.db import migrations, models
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        ("pghistory", "0005_events_middlewareevents"),
        ("cases", "0023_alter_litigationcases_case_status_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="ImportantDevelopment",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("title", models.CharField(max_length=250, verbose_name="Title")),
            ],
            options={
                "verbose_name": "Important Development",
                "verbose_name_plural": "Important Developments",
            },
        ),
        migrations.CreateModel(
            name="ImportantDevelopmentEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("title", models.CharField(max_length=250, verbose_name="Title")),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="event",
                        to="cases.importantdevelopment",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="importantdevelopment",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "cases_importantdevelopmentevent" ("id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "title") VALUES (NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."title"); RETURN NULL;',
                    hash="475e24ebf12d79609ca965d8a19097d3707a05be",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_2be47",
                    table="cases_importantdevelopment",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="importantdevelopment",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "cases_importantdevelopmentevent" ("id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "title") VALUES (NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."title"); RETURN NULL;',
                    hash="82b2deeb81c7eebf393ea52abbea0b242dfdc14b",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_09b9f",
                    table="cases_importantdevelopment",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddField(
            model_name="folder",
            name="ImportantDevelopment",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_ImportantDevelopment",
                to="cases.importantdevelopment",
                verbose_name="Important Development",
            ),
        ),
        migrations.AddField(
            model_name="litigationcases",
            name="ImportantDevelopment",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_ImportantDevelopment",
                to="cases.importantdevelopment",
                verbose_name="Important Development",
            ),
        ),
    ]
