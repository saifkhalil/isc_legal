# Generated by Django 4.1.3 on 2023-08-27 05:58

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0007_remove_pathevent_created_by_and_more'),
        ('accounts', '0004_employees_employeesevent_and_more'),
        ('activities', '0003_remove_hearing_snapshot_insert_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('pghistory', '0005_events_middlewareevents'),
        ('cases', '0003_remove_importantdevelopment_snapshot_insert_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdministrativeInvestigation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('subject', models.CharField(blank=True, max_length=500, null=True, verbose_name='Subject')),
                ('admin_order_number', models.CharField(blank=True, max_length=500, null=True, verbose_name='Administrative order number')),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Administrative Investigation',
                'verbose_name_plural': 'Administrate IveInvestigations',
            },
        ),
        migrations.CreateModel(
            name='AdministrativeInvestigationEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('subject', models.CharField(blank=True, max_length=500, null=True, verbose_name='Subject')),
                ('admin_order_number', models.CharField(blank=True, max_length=500, null=True, verbose_name='Administrative order number')),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Notation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('subject', models.CharField(blank=True, max_length=500, null=True, verbose_name='Subject')),
                ('description', models.CharField(blank=True, max_length=500, null=True, verbose_name='Description')),
                ('reference_number', models.CharField(blank=True, max_length=500, null=True, verbose_name='Reference Number')),
                ('reference_date', models.DateField(blank=True, null=True)),
                ('notation_date', models.DateField(blank=True, null=True)),
                ('requester', models.CharField(blank=True, max_length=500, null=True, verbose_name='Requester')),
                ('judge', models.CharField(blank=True, max_length=500, null=True, verbose_name='Judge Name')),
                ('detective', models.CharField(blank=True, max_length=500, null=True, verbose_name='Detective')),
                ('authorized_number', models.CharField(blank=True, max_length=500, null=True, verbose_name='Authorized number')),
                ('start_time', models.DateField(blank=True, null=True)),
                ('end_time', models.DateField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Notation',
                'verbose_name_plural': 'Notations',
            },
        ),
        migrations.CreateModel(
            name='NotationEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('subject', models.CharField(blank=True, max_length=500, null=True, verbose_name='Subject')),
                ('description', models.CharField(blank=True, max_length=500, null=True, verbose_name='Description')),
                ('reference_number', models.CharField(blank=True, max_length=500, null=True, verbose_name='Reference Number')),
                ('reference_date', models.DateField(blank=True, null=True)),
                ('notation_date', models.DateField(blank=True, null=True)),
                ('requester', models.CharField(blank=True, max_length=500, null=True, verbose_name='Requester')),
                ('judge', models.CharField(blank=True, max_length=500, null=True, verbose_name='Judge Name')),
                ('detective', models.CharField(blank=True, max_length=500, null=True, verbose_name='Detective')),
                ('authorized_number', models.CharField(blank=True, max_length=500, null=True, verbose_name='Authorized number')),
                ('start_time', models.DateField(blank=True, null=True)),
                ('end_time', models.DateField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='importantdevelopment',
            name='snapshot_insert',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='importantdevelopment',
            name='snapshot_update',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='stages',
            name='snapshot_insert',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='stages',
            name='snapshot_update',
        ),
        migrations.AddField(
            model_name='importantdevelopment',
            name='admin_id',
            field=models.BigIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='importantdevelopment',
            name='notation_id',
            field=models.BigIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='importantdevelopmentevent',
            name='admin_id',
            field=models.BigIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='importantdevelopmentevent',
            name='notation_id',
            field=models.BigIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='stages',
            name='status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='core.status'),
        ),
        migrations.AddField(
            model_name='stagesevent',
            name='status',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='core.status'),
        ),
        migrations.AlterField(
            model_name='folder',
            name='priority',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.priorities', verbose_name='Folder Priority'),
        ),
        migrations.AlterField(
            model_name='folderevent',
            name='priority',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='core.priorities', verbose_name='Folder Priority'),
        ),
        migrations.AlterField(
            model_name='litigationcases',
            name='ImportantDevelopment',
            field=models.ManyToManyField(blank=True, related_name='cases', to='cases.importantdevelopment', verbose_name='Important Development'),
        ),
        migrations.AlterField(
            model_name='litigationcases',
            name='hearing',
            field=models.ManyToManyField(blank=True, related_name='cases', to='activities.hearing', verbose_name='Hearing'),
        ),
        migrations.AlterField(
            model_name='litigationcases',
            name='id',
            field=models.AutoField(help_text='Litigation cases Id', primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='litigationcases',
            name='name',
            field=models.CharField(help_text='Name of Litigation case', max_length=500, verbose_name='Title'),
        ),
        migrations.AlterField(
            model_name='litigationcases',
            name='tasks',
            field=models.ManyToManyField(blank=True, related_name='cases', to='activities.task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='litigationcasesevent',
            name='name',
            field=models.CharField(help_text='Name of Litigation case', max_length=500, verbose_name='Title'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='importantdevelopment',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "cases_importantdevelopmentevent" ("admin_id", "case_id", "created_at", "created_by_id", "folder_id", "id", "is_deleted", "modified_at", "modified_by_id", "notation_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "title") VALUES (NEW."admin_id", NEW."case_id", NEW."created_at", NEW."created_by_id", NEW."folder_id", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", NEW."notation_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."title"); RETURN NULL;', hash='2e3982ab64ec526d47007c668f98039800e39479', operation='INSERT', pgid='pgtrigger_snapshot_insert_2be47', table='cases_importantdevelopment', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='importantdevelopment',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "cases_importantdevelopmentevent" ("admin_id", "case_id", "created_at", "created_by_id", "folder_id", "id", "is_deleted", "modified_at", "modified_by_id", "notation_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "title") VALUES (NEW."admin_id", NEW."case_id", NEW."created_at", NEW."created_by_id", NEW."folder_id", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", NEW."notation_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."title"); RETURN NULL;', hash='fa2b8d369bd433858af03161e476f7824d0c8876', operation='UPDATE', pgid='pgtrigger_snapshot_update_09b9f', table='cases_importantdevelopment', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='stages',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "cases_stagesevent" ("id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status_id") VALUES (NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."status_id"); RETURN NULL;', hash='097bf1dceb833741c333f6856d8413785c98259f', operation='INSERT', pgid='pgtrigger_snapshot_insert_e8403', table='cases_stages', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='stages',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "cases_stagesevent" ("id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status_id") VALUES (NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."status_id"); RETURN NULL;', hash='8da957af993633839611875330f9a2f54a3a8d1f', operation='UPDATE', pgid='pgtrigger_snapshot_update_7b495', table='cases_stages', when='AFTER')),
        ),
        migrations.AddField(
            model_name='notationevent',
            name='assignee',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Assignee'),
        ),
        migrations.AddField(
            model_name='notationevent',
            name='court',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='core.court', verbose_name='Court name'),
        ),
        migrations.AddField(
            model_name='notationevent',
            name='created_by',
            field=models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notationevent',
            name='modified_by',
            field=models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notationevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='notationevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='cases.notation'),
        ),
        migrations.AddField(
            model_name='notationevent',
            name='priority',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='core.priorities', verbose_name='Priority'),
        ),
        migrations.AddField(
            model_name='notation',
            name='ImportantDevelopment',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_ImportantDevelopment', to='cases.importantdevelopment', verbose_name='Important Development'),
        ),
        migrations.AddField(
            model_name='notation',
            name='assignee',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_assignee', to=settings.AUTH_USER_MODEL, verbose_name='Assignee'),
        ),
        migrations.AddField(
            model_name='notation',
            name='comments',
            field=models.ManyToManyField(blank=True, to='core.comments', verbose_name='Comments'),
        ),
        migrations.AddField(
            model_name='notation',
            name='court',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.court', verbose_name='Court name'),
        ),
        migrations.AddField(
            model_name='notation',
            name='created_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_createdby', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notation',
            name='modified_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_modifiedby', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notation',
            name='paths',
            field=models.ManyToManyField(blank=True, to='core.path', verbose_name='Paths'),
        ),
        migrations.AddField(
            model_name='notation',
            name='priority',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.priorities', verbose_name='Priority'),
        ),
        migrations.AddField(
            model_name='notation',
            name='shared_with',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_shared_with', to=settings.AUTH_USER_MODEL, verbose_name='Shared With'),
        ),
        migrations.AddField(
            model_name='administrativeinvestigationevent',
            name='assignee',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Assignee'),
        ),
        migrations.AddField(
            model_name='administrativeinvestigationevent',
            name='chairman',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='accounts.employees', verbose_name='Chairman of the Committee'),
        ),
        migrations.AddField(
            model_name='administrativeinvestigationevent',
            name='created_by',
            field=models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='administrativeinvestigationevent',
            name='modified_by',
            field=models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='administrativeinvestigationevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='administrativeinvestigationevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='cases.administrativeinvestigation'),
        ),
        migrations.AddField(
            model_name='administrativeinvestigationevent',
            name='priority',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='core.priorities', verbose_name='Priority'),
        ),
        migrations.AddField(
            model_name='administrativeinvestigation',
            name='ImportantDevelopment',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_ImportantDevelopment', to='cases.importantdevelopment', verbose_name='Important Development'),
        ),
        migrations.AddField(
            model_name='administrativeinvestigation',
            name='assignee',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_assignee', to=settings.AUTH_USER_MODEL, verbose_name='Assignee'),
        ),
        migrations.AddField(
            model_name='administrativeinvestigation',
            name='chairman',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_chairman', to='accounts.employees', verbose_name='Chairman of the Committee'),
        ),
        migrations.AddField(
            model_name='administrativeinvestigation',
            name='created_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_createdby', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='administrativeinvestigation',
            name='members',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_members', to='accounts.employees', verbose_name='Committee members'),
        ),
        migrations.AddField(
            model_name='administrativeinvestigation',
            name='modified_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_modifiedby', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='administrativeinvestigation',
            name='paths',
            field=models.ManyToManyField(blank=True, to='core.path', verbose_name='Paths'),
        ),
        migrations.AddField(
            model_name='administrativeinvestigation',
            name='priority',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.priorities', verbose_name='Priority'),
        ),
        migrations.AddField(
            model_name='administrativeinvestigation',
            name='shared_with',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_shared_with', to=settings.AUTH_USER_MODEL, verbose_name='Shared With'),
        ),
        migrations.AddIndex(
            model_name='notation',
            index=models.Index(fields=['id', 'subject', 'description'], name='cases_notat_id_cbb024_idx'),
        ),
        migrations.AddIndex(
            model_name='administrativeinvestigation',
            index=models.Index(fields=['id', 'subject', 'admin_order_number'], name='cases_admin_id_a00d13_idx'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='notation',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "cases_notationevent" ("assignee_id", "authorized_number", "court_id", "created_at", "created_by_id", "description", "detective", "end_time", "id", "is_deleted", "judge", "modified_at", "modified_by_id", "notation_date", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "priority_id", "reference_date", "reference_number", "requester", "start_time", "subject") VALUES (NEW."assignee_id", NEW."authorized_number", NEW."court_id", NEW."created_at", NEW."created_by_id", NEW."description", NEW."detective", NEW."end_time", NEW."id", NEW."is_deleted", NEW."judge", NEW."modified_at", NEW."modified_by_id", NEW."notation_date", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."priority_id", NEW."reference_date", NEW."reference_number", NEW."requester", NEW."start_time", NEW."subject"); RETURN NULL;', hash='e95eb46e568d9e702eb4c205fffc5b09c8cd66b7', operation='INSERT', pgid='pgtrigger_snapshot_insert_58fd1', table='cases_notation', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='notation',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "cases_notationevent" ("assignee_id", "authorized_number", "court_id", "created_at", "created_by_id", "description", "detective", "end_time", "id", "is_deleted", "judge", "modified_at", "modified_by_id", "notation_date", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "priority_id", "reference_date", "reference_number", "requester", "start_time", "subject") VALUES (NEW."assignee_id", NEW."authorized_number", NEW."court_id", NEW."created_at", NEW."created_by_id", NEW."description", NEW."detective", NEW."end_time", NEW."id", NEW."is_deleted", NEW."judge", NEW."modified_at", NEW."modified_by_id", NEW."notation_date", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."priority_id", NEW."reference_date", NEW."reference_number", NEW."requester", NEW."start_time", NEW."subject"); RETURN NULL;', hash='f38c8e5b57b0cb6e4a58d96d6d31ee08b9d1036b', operation='UPDATE', pgid='pgtrigger_snapshot_update_4f43f', table='cases_notation', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='administrativeinvestigation',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "cases_administrativeinvestigationevent" ("admin_order_number", "assignee_id", "chairman_id", "created_at", "created_by_id", "end_time", "id", "is_deleted", "modified_at", "modified_by_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "priority_id", "start_time", "subject") VALUES (NEW."admin_order_number", NEW."assignee_id", NEW."chairman_id", NEW."created_at", NEW."created_by_id", NEW."end_time", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."priority_id", NEW."start_time", NEW."subject"); RETURN NULL;', hash='3c0b37ce9c88c851a25bb0873e5738f2757b3636', operation='INSERT', pgid='pgtrigger_snapshot_insert_37cdf', table='cases_administrativeinvestigation', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='administrativeinvestigation',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "cases_administrativeinvestigationevent" ("admin_order_number", "assignee_id", "chairman_id", "created_at", "created_by_id", "end_time", "id", "is_deleted", "modified_at", "modified_by_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "priority_id", "start_time", "subject") VALUES (NEW."admin_order_number", NEW."assignee_id", NEW."chairman_id", NEW."created_at", NEW."created_by_id", NEW."end_time", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."priority_id", NEW."start_time", NEW."subject"); RETURN NULL;', hash='d2d8c08b86359f5ebde58e7d1e703966bc71d137', operation='UPDATE', pgid='pgtrigger_snapshot_update_6e1e9', table='cases_administrativeinvestigation', when='AFTER')),
        ),
    ]
