# Generated by Django 4.1.3 on 2023-04-05 08:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cases', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', '0001_initial'),
        ('pghistory', '0005_events_middlewareevents'),
        ('activities', '0002_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='litigationcasesevent',
            name='case_status',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='core.status', verbose_name='Case Status'),
        ),
        migrations.AddField(
            model_name='litigationcasesevent',
            name='case_type',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='cases.case_type', verbose_name='Case type'),
        ),
        migrations.AddField(
            model_name='litigationcasesevent',
            name='client_position',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='cases.client_position', verbose_name='Client Position'),
        ),
        migrations.AddField(
            model_name='litigationcasesevent',
            name='court',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='core.court', verbose_name='Court name'),
        ),
        migrations.AddField(
            model_name='litigationcasesevent',
            name='created_by',
            field=models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='litigationcasesevent',
            name='modified_by',
            field=models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='litigationcasesevent',
            name='opponent_position',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='cases.opponent_position', verbose_name='Opponent Position'),
        ),
        migrations.AddField(
            model_name='litigationcasesevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='litigationcasesevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='cases.litigationcases'),
        ),
        migrations.AddField(
            model_name='litigationcasesevent',
            name='priority',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='core.priorities', verbose_name='Matter Priority'),
        ),
        migrations.AddField(
            model_name='litigationcases',
            name='ImportantDevelopment',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_ImportantDevelopment', to='cases.importantdevelopment', verbose_name='Important Development'),
        ),
        migrations.AddField(
            model_name='litigationcases',
            name='Stage',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cases.stages', verbose_name='Stage'),
        ),
        migrations.AddField(
            model_name='litigationcases',
            name='assignee',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_assignee', to=settings.AUTH_USER_MODEL, verbose_name='Assignee'),
        ),
        migrations.AddField(
            model_name='litigationcases',
            name='case_status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_case_status', to='core.status', verbose_name='Case Status'),
        ),
        migrations.AddField(
            model_name='litigationcases',
            name='case_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cases.case_type', verbose_name='Case type'),
        ),
        migrations.AddField(
            model_name='litigationcases',
            name='client_position',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cases.client_position', verbose_name='Client Position'),
        ),
        migrations.AddField(
            model_name='litigationcases',
            name='comments',
            field=models.ManyToManyField(blank=True, to='core.comments', verbose_name='Comments'),
        ),
        migrations.AddField(
            model_name='litigationcases',
            name='court',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.court', verbose_name='Court name'),
        ),
        migrations.AddField(
            model_name='litigationcases',
            name='created_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_createdby', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='litigationcases',
            name='documents',
            field=models.ManyToManyField(blank=True, to='core.documents', verbose_name='Documents'),
        ),
        migrations.AddField(
            model_name='litigationcases',
            name='hearing',
            field=models.ManyToManyField(blank=True, to='activities.hearing', verbose_name='Hearing'),
        ),
        migrations.AddField(
            model_name='litigationcases',
            name='modified_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_modifiedby', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='litigationcases',
            name='opponent_position',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cases.opponent_position', verbose_name='Opponent Position'),
        ),
        migrations.AddField(
            model_name='litigationcases',
            name='paths',
            field=models.ManyToManyField(blank=True, to='core.path', verbose_name='Paths'),
        ),
        migrations.AddField(
            model_name='litigationcases',
            name='priority',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.priorities', verbose_name='Matter Priority'),
        ),
        migrations.AddField(
            model_name='litigationcases',
            name='shared_with',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_shared_with', to=settings.AUTH_USER_MODEL, verbose_name='Shared With'),
        ),
        migrations.AddField(
            model_name='litigationcases',
            name='tasks',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_task', to='activities.task', verbose_name='Task'),
        ),
        migrations.AddField(
            model_name='importantdevelopmentevent',
            name='created_by',
            field=models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='importantdevelopmentevent',
            name='modified_by',
            field=models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='importantdevelopmentevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='importantdevelopmentevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='cases.importantdevelopment'),
        ),
        migrations.AddField(
            model_name='importantdevelopment',
            name='created_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_createdby', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='importantdevelopment',
            name='modified_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_modifiedby', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='folderevent',
            name='assignee',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Assignee'),
        ),
        migrations.AddField(
            model_name='folderevent',
            name='court',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='core.court', verbose_name='Court name'),
        ),
        migrations.AddField(
            model_name='folderevent',
            name='created_by',
            field=models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='folderevent',
            name='folder_status',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='core.status', verbose_name='Folder Status'),
        ),
        migrations.AddField(
            model_name='folderevent',
            name='folder_type',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='cases.case_type', verbose_name='Folder type'),
        ),
        migrations.AddField(
            model_name='folderevent',
            name='modified_by',
            field=models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='folderevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='folderevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='cases.folder'),
        ),
        migrations.AddField(
            model_name='folderevent',
            name='priority',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='core.priorities', verbose_name='Matter Priority'),
        ),
        migrations.AddField(
            model_name='folder',
            name='ImportantDevelopment',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_ImportantDevelopment', to='cases.importantdevelopment', verbose_name='Important Development'),
        ),
        migrations.AddField(
            model_name='folder',
            name='assignee',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_assignee', to=settings.AUTH_USER_MODEL, verbose_name='Assignee'),
        ),
        migrations.AddField(
            model_name='folder',
            name='comments',
            field=models.ManyToManyField(blank=True, to='core.comments', verbose_name='Comments'),
        ),
        migrations.AddField(
            model_name='folder',
            name='court',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.court', verbose_name='Court name'),
        ),
        migrations.AddField(
            model_name='folder',
            name='created_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_createdby', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='folder',
            name='documents',
            field=models.ManyToManyField(blank=True, to='core.documents', verbose_name='Documents'),
        ),
        migrations.AddField(
            model_name='folder',
            name='folder_status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_folder_status', to='core.status', verbose_name='Folder Status'),
        ),
        migrations.AddField(
            model_name='folder',
            name='folder_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cases.case_type', verbose_name='Folder type'),
        ),
        migrations.AddField(
            model_name='folder',
            name='hearing',
            field=models.ManyToManyField(blank=True, to='activities.hearing', verbose_name='Hearing'),
        ),
        migrations.AddField(
            model_name='folder',
            name='modified_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_modifiedby', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='folder',
            name='paths',
            field=models.ManyToManyField(blank=True, to='core.path', verbose_name='Paths'),
        ),
        migrations.AddField(
            model_name='folder',
            name='priority',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.priorities', verbose_name='Matter Priority'),
        ),
        migrations.AddField(
            model_name='folder',
            name='shared_with',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_shared_with', to=settings.AUTH_USER_MODEL, verbose_name='Shared With'),
        ),
        migrations.AddField(
            model_name='folder',
            name='tasks',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_task', to='activities.task', verbose_name='Task'),
        ),
        migrations.AddField(
            model_name='clientpositionevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='clientpositionevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='cases.client_position'),
        ),
        migrations.AddField(
            model_name='casetypeevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='casetypeevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='cases.case_type'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='stages',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "cases_stagesevent" ("id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='43dfed1c7642e0e212bcad20e4e109dec6a6bce2', operation='INSERT', pgid='pgtrigger_snapshot_insert_e8403', table='cases_stages', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='stages',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "cases_stagesevent" ("id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='176776c723ef5c212037c005c4b7bb6e6351b5f6', operation='UPDATE', pgid='pgtrigger_snapshot_update_7b495', table='cases_stages', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='opponent_position',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "cases_opponentpositionevent" ("id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position") VALUES (NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."position"); RETURN NULL;', hash='f1f8177d4c078664a2b8471d3ec7129d22f9ce19', operation='INSERT', pgid='pgtrigger_snapshot_insert_1c73b', table='cases_opponent_position', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='opponent_position',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "cases_opponentpositionevent" ("id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position") VALUES (NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."position"); RETURN NULL;', hash='99919590f2a9528bf4601fe20900d358065d43ac', operation='UPDATE', pgid='pgtrigger_snapshot_update_b4706', table='cases_opponent_position', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='client_position',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "cases_clientpositionevent" ("id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='087414159316e714316e731cab14c765ee4a450d', operation='INSERT', pgid='pgtrigger_snapshot_insert_d43f4', table='cases_client_position', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='client_position',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "cases_clientpositionevent" ("id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='c2311300b82ec060de34a6d9f329c115ed006228', operation='UPDATE', pgid='pgtrigger_snapshot_update_a87e4', table='cases_client_position', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='case_type',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "cases_casetypeevent" ("id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "type") VALUES (NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."type"); RETURN NULL;', hash='91de3e397a8998f383881039f70a14d5e0929d3f', operation='INSERT', pgid='pgtrigger_snapshot_insert_0bd9c', table='cases_case_type', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='case_type',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "cases_casetypeevent" ("id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "type") VALUES (NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."type"); RETURN NULL;', hash='171ba3200834ad9d380748f700a532c0c7774beb', operation='UPDATE', pgid='pgtrigger_snapshot_update_35c45', table='cases_case_type', when='AFTER')),
        ),
        migrations.AddIndex(
            model_name='litigationcases',
            index=models.Index(fields=['id', 'name', 'Stage', 'case_type', 'case_category', 'assignee', 'court', 'description'], name='cases_litig_id_5c9221_idx'),
        ),
        migrations.AddIndex(
            model_name='folder',
            index=models.Index(fields=['id', 'name', 'folder_type', 'folder_category', 'assignee', 'court', 'description'], name='cases_folde_id_b5cdd8_idx'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='litigationcases',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "cases_litigationcasesevent" ("Stage_id", "assignee_id", "case_category", "case_status_id", "case_type_id", "client_position_id", "court_id", "created_at", "created_by_id", "description", "detective", "end_time", "id", "internal_ref_number", "is_deleted", "judge", "modified_at", "modified_by_id", "name", "opponent_position_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "priority_id", "start_time") VALUES (NEW."Stage_id", NEW."assignee_id", NEW."case_category", NEW."case_status_id", NEW."case_type_id", NEW."client_position_id", NEW."court_id", NEW."created_at", NEW."created_by_id", NEW."description", NEW."detective", NEW."end_time", NEW."id", NEW."internal_ref_number", NEW."is_deleted", NEW."judge", NEW."modified_at", NEW."modified_by_id", NEW."name", NEW."opponent_position_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."priority_id", NEW."start_time"); RETURN NULL;', hash='42548b2d6b4e6c19c9bebbc7880b7775af0cf4c7', operation='INSERT', pgid='pgtrigger_snapshot_insert_38763', table='cases_litigationcases', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='litigationcases',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "cases_litigationcasesevent" ("Stage_id", "assignee_id", "case_category", "case_status_id", "case_type_id", "client_position_id", "court_id", "created_at", "created_by_id", "description", "detective", "end_time", "id", "internal_ref_number", "is_deleted", "judge", "modified_at", "modified_by_id", "name", "opponent_position_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "priority_id", "start_time") VALUES (NEW."Stage_id", NEW."assignee_id", NEW."case_category", NEW."case_status_id", NEW."case_type_id", NEW."client_position_id", NEW."court_id", NEW."created_at", NEW."created_by_id", NEW."description", NEW."detective", NEW."end_time", NEW."id", NEW."internal_ref_number", NEW."is_deleted", NEW."judge", NEW."modified_at", NEW."modified_by_id", NEW."name", NEW."opponent_position_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."priority_id", NEW."start_time"); RETURN NULL;', hash='22272ff8ef6b9c9a5610e3c5992b4e399479a509', operation='UPDATE', pgid='pgtrigger_snapshot_update_80525', table='cases_litigationcases', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='importantdevelopment',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "cases_importantdevelopmentevent" ("case_id", "created_at", "created_by_id", "id", "is_deleted", "modified_at", "modified_by_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "title") VALUES (NEW."case_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."title"); RETURN NULL;', hash='87767364d11383246064ecd9cdffacf0f5ed4613', operation='INSERT', pgid='pgtrigger_snapshot_insert_2be47', table='cases_importantdevelopment', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='importantdevelopment',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "cases_importantdevelopmentevent" ("case_id", "created_at", "created_by_id", "id", "is_deleted", "modified_at", "modified_by_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "title") VALUES (NEW."case_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."title"); RETURN NULL;', hash='0f28d13eb749da6830a7b9eb8c6dc4fcb44c424d', operation='UPDATE', pgid='pgtrigger_snapshot_update_09b9f', table='cases_importantdevelopment', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='folder',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "cases_folderevent" ("assignee_id", "court_id", "created_at", "created_by_id", "description", "end_time", "folder_category", "folder_status_id", "folder_type_id", "id", "internal_ref_number", "is_deleted", "modified_at", "modified_by_id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "priority_id", "record_type", "start_time") VALUES (NEW."assignee_id", NEW."court_id", NEW."created_at", NEW."created_by_id", NEW."description", NEW."end_time", NEW."folder_category", NEW."folder_status_id", NEW."folder_type_id", NEW."id", NEW."internal_ref_number", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."priority_id", NEW."record_type", NEW."start_time"); RETURN NULL;', hash='d7c533f3a587ebc2be2dd6ad42be8ac63daf9a8a', operation='INSERT', pgid='pgtrigger_snapshot_insert_72454', table='cases_folder', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='folder',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "cases_folderevent" ("assignee_id", "court_id", "created_at", "created_by_id", "description", "end_time", "folder_category", "folder_status_id", "folder_type_id", "id", "internal_ref_number", "is_deleted", "modified_at", "modified_by_id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "priority_id", "record_type", "start_time") VALUES (NEW."assignee_id", NEW."court_id", NEW."created_at", NEW."created_by_id", NEW."description", NEW."end_time", NEW."folder_category", NEW."folder_status_id", NEW."folder_type_id", NEW."id", NEW."internal_ref_number", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."priority_id", NEW."record_type", NEW."start_time"); RETURN NULL;', hash='33b8087e658f687eca91bd2ffd218f9688c55da1', operation='UPDATE', pgid='pgtrigger_snapshot_update_9f4aa', table='cases_folder', when='AFTER')),
        ),
    ]
