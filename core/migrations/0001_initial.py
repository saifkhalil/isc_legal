# Generated by Django 4.1.3 on 2023-04-05 08:26

import core.model_mixins
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('pghistory', '0005_events_middlewareevents'),
    ]

    operations = [
        migrations.CreateModel(
            name='comments',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('comment', models.CharField(max_length=250, verbose_name='Comment')),
                ('case_id', models.BigIntegerField(blank=True, null=True)),
                ('folder_id', models.BigIntegerField(blank=True, null=True)),
                ('event_id', models.BigIntegerField(blank=True, null=True)),
                ('task_id', models.BigIntegerField(blank=True, null=True)),
                ('hearing_id', models.BigIntegerField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_createdby', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_modifiedby', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
            },
        ),
        migrations.CreateModel(
            name='contracts',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=250, verbose_name='Name')),
                ('attachment', models.FileField(upload_to='contracts/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png', 'git'])], verbose_name='Attachment')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_createdby', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_modifiedby', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='court',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=250, unique=True, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Court',
                'verbose_name_plural': 'Courts',
            },
        ),
        migrations.CreateModel(
            name='documents',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=250, verbose_name='Name')),
                ('attachment', models.FileField(upload_to='documents/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png', 'git'])], verbose_name='Attachment')),
                ('case_id', models.IntegerField(blank=True, null=True, verbose_name='Litigation Case')),
                ('path_id', models.IntegerField(blank=True, null=True, verbose_name='Path')),
                ('folder_id', models.IntegerField(blank=True, null=True, verbose_name='Folder')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_createdby', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_modifiedby', to=settings.AUTH_USER_MODEL)),
            ],
            bases=(core.model_mixins.ExtraDataModelMixin, core.model_mixins.HooksModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('action_at', models.DateTimeField(auto_now_add=True)),
                ('model', models.CharField(max_length=50, verbose_name='Model Name')),
                ('obj', models.IntegerField(verbose_name='Object ID')),
                ('action', models.CharField(max_length=20, verbose_name='Action')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('is_read', models.BooleanField(default=False, verbose_name='Read Status')),
                ('action_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_actionby', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
            },
        ),
        migrations.CreateModel(
            name='Path',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('case_id', models.IntegerField(blank=True, null=True, verbose_name='Litigation Case')),
                ('folder_id', models.IntegerField(blank=True, null=True, verbose_name='Folder')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('mptt_level', models.PositiveIntegerField(editable=False)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_createdby', to=settings.AUTH_USER_MODEL)),
                ('documents', models.ManyToManyField(blank=True, related_name='paths', to='core.documents', verbose_name='Documents')),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_modifiedby', to=settings.AUTH_USER_MODEL)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.path')),
            ],
            options={
                'verbose_name': 'Path',
                'verbose_name_plural': 'Paths',
            },
        ),
        migrations.CreateModel(
            name='priorities',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('priority', models.CharField(max_length=250, verbose_name='Priority')),
            ],
            options={
                'verbose_name': 'Priority',
                'verbose_name_plural': 'Priorities',
            },
        ),
        migrations.CreateModel(
            name='replies',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('reply', models.CharField(max_length=250, verbose_name='Reply')),
                ('comment_id', models.BigIntegerField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_createdby', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_modifiedby', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Reply',
                'verbose_name_plural': 'Replies',
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=250, verbose_name='Status')),
            ],
            options={
                'verbose_name': 'Status',
                'verbose_name_plural': 'Statuses',
            },
        ),
        migrations.CreateModel(
            name='StatusEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('status', models.CharField(max_length=250, verbose_name='Status')),
                ('pgh_context', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='core.status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RepliesEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('reply', models.CharField(max_length=250, verbose_name='Reply')),
                ('comment_id', models.BigIntegerField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL)),
                ('pgh_context', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='core.replies')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PrioritiesEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('priority', models.CharField(max_length=250, verbose_name='Priority')),
                ('pgh_context', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='core.priorities')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PathEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('name', models.CharField(max_length=50)),
                ('case_id', models.IntegerField(blank=True, null=True, verbose_name='Litigation Case')),
                ('folder_id', models.IntegerField(blank=True, null=True, verbose_name='Folder')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(editable=False)),
                ('mptt_level', models.PositiveIntegerField(editable=False)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='core.path')),
                ('pgh_context', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='core.path')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NotificationEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('action_at', models.DateTimeField(auto_now_add=True)),
                ('model', models.CharField(max_length=50, verbose_name='Model Name')),
                ('obj', models.IntegerField(verbose_name='Object ID')),
                ('action', models.CharField(max_length=20, verbose_name='Action')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('is_read', models.BooleanField(default=False, verbose_name='Read Status')),
                ('action_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL)),
                ('pgh_context', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='core.notification')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DocumentsEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('name', models.CharField(max_length=250, verbose_name='Name')),
                ('attachment', models.FileField(upload_to='documents/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png', 'git'])], verbose_name='Attachment')),
                ('case_id', models.IntegerField(blank=True, null=True, verbose_name='Litigation Case')),
                ('path_id', models.IntegerField(blank=True, null=True, verbose_name='Path')),
                ('folder_id', models.IntegerField(blank=True, null=True, verbose_name='Folder')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL)),
                ('pgh_context', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='core.documents')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CourtEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('name', models.CharField(max_length=250, verbose_name='Name')),
                ('pgh_context', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='core.court')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContractsEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('name', models.CharField(max_length=250, verbose_name='Name')),
                ('attachment', models.FileField(upload_to='contracts/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png', 'git'])], verbose_name='Attachment')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL)),
                ('pgh_context', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='core.contracts')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CommentsEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('comment', models.CharField(max_length=250, verbose_name='Comment')),
                ('case_id', models.BigIntegerField(blank=True, null=True)),
                ('folder_id', models.BigIntegerField(blank=True, null=True)),
                ('event_id', models.BigIntegerField(blank=True, null=True)),
                ('task_id', models.BigIntegerField(blank=True, null=True)),
                ('hearing_id', models.BigIntegerField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL)),
                ('pgh_context', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='core.comments')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='comments',
            name='replies',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_replies', to='core.replies', verbose_name='Reply'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='status',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "core_statusevent" ("id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status") VALUES (NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."status"); RETURN NULL;', hash='cb8f4753b6405749f4124f1d18c1f1290856949a', operation='INSERT', pgid='pgtrigger_snapshot_insert_0f7bb', table='core_status', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='status',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "core_statusevent" ("id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status") VALUES (NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."status"); RETURN NULL;', hash='2694667a700e74f109c508272de3326821aa1b28', operation='UPDATE', pgid='pgtrigger_snapshot_update_eb6d5', table='core_status', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='priorities',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "core_prioritiesevent" ("id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "priority") VALUES (NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."priority"); RETURN NULL;', hash='3f5c0acde4c8b29a4ddb9d7362f90927e99f941c', operation='INSERT', pgid='pgtrigger_snapshot_insert_229f2', table='core_priorities', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='priorities',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "core_prioritiesevent" ("id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "priority") VALUES (NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."priority"); RETURN NULL;', hash='d2f0f5247bdbe5a8a29b870b72e43967008accea', operation='UPDATE', pgid='pgtrigger_snapshot_update_23f88', table='core_priorities', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='court',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "core_courtevent" ("id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='b3d2a282b778263fe0de713bf8eb2ff0f9996789', operation='INSERT', pgid='pgtrigger_snapshot_insert_5bdfa', table='core_court', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='court',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "core_courtevent" ("id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='209d6c8bce3cf933c78f657249591493310907a3', operation='UPDATE', pgid='pgtrigger_snapshot_update_1ab18', table='core_court', when='AFTER')),
        ),
        migrations.AlterUniqueTogether(
            name='path',
            unique_together={('parent', 'name')},
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='replies',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "core_repliesevent" ("comment_id", "created_at", "created_by_id", "id", "is_deleted", "modified_at", "modified_by_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reply") VALUES (NEW."comment_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."reply"); RETURN NULL;', hash='812432a73dd4d5b74f49910d639d66b3511c80a3', operation='INSERT', pgid='pgtrigger_snapshot_insert_a9e98', table='core_replies', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='replies',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "core_repliesevent" ("comment_id", "created_at", "created_by_id", "id", "is_deleted", "modified_at", "modified_by_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reply") VALUES (NEW."comment_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."reply"); RETURN NULL;', hash='c59b3498b6336b84390748d483237dce99c6d7cf', operation='UPDATE', pgid='pgtrigger_snapshot_update_10b7e', table='core_replies', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='path',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "core_pathevent" ("case_id", "created_at", "created_by_id", "folder_id", "id", "lft", "modified_at", "modified_by_id", "mptt_level", "name", "parent_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "rght", "tree_id") VALUES (NEW."case_id", NEW."created_at", NEW."created_by_id", NEW."folder_id", NEW."id", NEW."lft", NEW."modified_at", NEW."modified_by_id", NEW."mptt_level", NEW."name", NEW."parent_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."rght", NEW."tree_id"); RETURN NULL;', hash='72778b1fc8830bd4b212a6814e2273f04d039c01', operation='INSERT', pgid='pgtrigger_snapshot_insert_5eab7', table='core_path', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='path',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "core_pathevent" ("case_id", "created_at", "created_by_id", "folder_id", "id", "lft", "modified_at", "modified_by_id", "mptt_level", "name", "parent_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "rght", "tree_id") VALUES (NEW."case_id", NEW."created_at", NEW."created_by_id", NEW."folder_id", NEW."id", NEW."lft", NEW."modified_at", NEW."modified_by_id", NEW."mptt_level", NEW."name", NEW."parent_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."rght", NEW."tree_id"); RETURN NULL;', hash='0148f8fb945f1a332cecc6f37c245dbff4a46452', operation='UPDATE', pgid='pgtrigger_snapshot_update_56fb9', table='core_path', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='notification',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "core_notificationevent" ("action", "action_at", "action_by_id", "id", "is_deleted", "is_read", "model", "obj", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."action", NEW."action_at", NEW."action_by_id", NEW."id", NEW."is_deleted", NEW."is_read", NEW."model", NEW."obj", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='f9dec8013c43e48992555c8e1d38ae0dea9e6f45', operation='INSERT', pgid='pgtrigger_snapshot_insert_c38ef', table='core_notification', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='notification',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "core_notificationevent" ("action", "action_at", "action_by_id", "id", "is_deleted", "is_read", "model", "obj", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."action", NEW."action_at", NEW."action_by_id", NEW."id", NEW."is_deleted", NEW."is_read", NEW."model", NEW."obj", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='045b155b3a0370d24d87c071de20ab6cf45e3732', operation='UPDATE', pgid='pgtrigger_snapshot_update_be18e', table='core_notification', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='documents',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "core_documentsevent" ("attachment", "case_id", "created_at", "created_by_id", "folder_id", "id", "is_deleted", "modified_at", "modified_by_id", "name", "path_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."attachment", NEW."case_id", NEW."created_at", NEW."created_by_id", NEW."folder_id", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", NEW."name", NEW."path_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='1df997c63449ffe68474f546ca9214ab0eb12a24', operation='INSERT', pgid='pgtrigger_snapshot_insert_49b87', table='core_documents', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='documents',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "core_documentsevent" ("attachment", "case_id", "created_at", "created_by_id", "folder_id", "id", "is_deleted", "modified_at", "modified_by_id", "name", "path_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."attachment", NEW."case_id", NEW."created_at", NEW."created_by_id", NEW."folder_id", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", NEW."name", NEW."path_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='ce71217e4c699f4174d9617dc328e27758d1b79e', operation='UPDATE', pgid='pgtrigger_snapshot_update_c495f', table='core_documents', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='contracts',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "core_contractsevent" ("attachment", "created_at", "created_by_id", "id", "is_deleted", "modified_at", "modified_by_id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."attachment", NEW."created_at", NEW."created_by_id", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='7fc6cfb327b62a96a69292acf93276029856af60', operation='INSERT', pgid='pgtrigger_snapshot_insert_a6999', table='core_contracts', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='contracts',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "core_contractsevent" ("attachment", "created_at", "created_by_id", "id", "is_deleted", "modified_at", "modified_by_id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."attachment", NEW."created_at", NEW."created_by_id", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='2d6d9dd506be6901f97760fdd5703d074be687cd', operation='UPDATE', pgid='pgtrigger_snapshot_update_0fac5', table='core_contracts', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='comments',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "core_commentsevent" ("case_id", "comment", "created_at", "created_by_id", "event_id", "folder_id", "hearing_id", "id", "is_deleted", "modified_at", "modified_by_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "task_id") VALUES (NEW."case_id", NEW."comment", NEW."created_at", NEW."created_by_id", NEW."event_id", NEW."folder_id", NEW."hearing_id", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."task_id"); RETURN NULL;', hash='c546abdeb3b02d0ce281d83069b8f755eeb491a7', operation='INSERT', pgid='pgtrigger_snapshot_insert_cf925', table='core_comments', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='comments',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "core_commentsevent" ("case_id", "comment", "created_at", "created_by_id", "event_id", "folder_id", "hearing_id", "id", "is_deleted", "modified_at", "modified_by_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "task_id") VALUES (NEW."case_id", NEW."comment", NEW."created_at", NEW."created_by_id", NEW."event_id", NEW."folder_id", NEW."hearing_id", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."task_id"); RETURN NULL;', hash='b047c8ad3e7110bdfd2aa09896cabb8d6bcd2714', operation='UPDATE', pgid='pgtrigger_snapshot_update_eb534', table='core_comments', when='AFTER')),
        ),
    ]
