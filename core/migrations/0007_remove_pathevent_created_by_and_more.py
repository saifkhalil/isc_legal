# Generated by Django 4.1.3 on 2023-08-27 05:58

from django.db import migrations, models
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0006_rename_mptt_level_path_level_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='pathevent',
            name='created_by',
        ),
        migrations.RemoveField(
            model_name='pathevent',
            name='modified_by',
        ),
        migrations.RemoveField(
            model_name='pathevent',
            name='parent',
        ),
        migrations.RemoveField(
            model_name='pathevent',
            name='pgh_context',
        ),
        migrations.RemoveField(
            model_name='pathevent',
            name='pgh_obj',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='comments',
            name='snapshot_insert',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='comments',
            name='snapshot_update',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='documents',
            name='snapshot_insert',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='documents',
            name='snapshot_update',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='notification',
            name='snapshot_insert',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='notification',
            name='snapshot_update',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='path',
            name='snapshot_insert',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='path',
            name='snapshot_update',
        ),
        migrations.AddField(
            model_name='comments',
            name='notation_id',
            field=models.BigIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='commentsevent',
            name='notation_id',
            field=models.BigIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='documents',
            name='hearing_id',
            field=models.IntegerField(blank=True, null=True, verbose_name='Hearing'),
        ),
        migrations.AddField(
            model_name='documents',
            name='task_id',
            field=models.IntegerField(blank=True, null=True, verbose_name='Task'),
        ),
        migrations.AddField(
            model_name='documentsevent',
            name='hearing_id',
            field=models.IntegerField(blank=True, null=True, verbose_name='Hearing'),
        ),
        migrations.AddField(
            model_name='documentsevent',
            name='task_id',
            field=models.IntegerField(blank=True, null=True, verbose_name='Task'),
        ),
        migrations.AddField(
            model_name='notification',
            name='browser_read',
            field=models.BooleanField(default=False, verbose_name='Brwoser Read Status'),
        ),
        migrations.AddField(
            model_name='notification',
            name='object_name',
            field=models.CharField(blank=True, max_length=200, null=True, verbose_name='Object Name'),
        ),
        migrations.AddField(
            model_name='notificationevent',
            name='browser_read',
            field=models.BooleanField(default=False, verbose_name='Brwoser Read Status'),
        ),
        migrations.AddField(
            model_name='notificationevent',
            name='object_name',
            field=models.CharField(blank=True, max_length=200, null=True, verbose_name='Object Name'),
        ),
        migrations.AddField(
            model_name='path',
            name='admin_id',
            field=models.IntegerField(blank=True, null=True, verbose_name='Administrative Investigation'),
        ),
        migrations.AddField(
            model_name='path',
            name='notation_id',
            field=models.IntegerField(blank=True, null=True, verbose_name='Notation'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='comments',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "core_commentsevent" ("case_id", "comment", "created_at", "created_by_id", "event_id", "folder_id", "hearing_id", "id", "is_deleted", "modified_at", "modified_by_id", "notation_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "task_id") VALUES (NEW."case_id", NEW."comment", NEW."created_at", NEW."created_by_id", NEW."event_id", NEW."folder_id", NEW."hearing_id", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", NEW."notation_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."task_id"); RETURN NULL;', hash='36bbc0725b19d99b8bac60bbdea123b4c5f940f7', operation='INSERT', pgid='pgtrigger_snapshot_insert_cf925', table='core_comments', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='comments',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "core_commentsevent" ("case_id", "comment", "created_at", "created_by_id", "event_id", "folder_id", "hearing_id", "id", "is_deleted", "modified_at", "modified_by_id", "notation_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "task_id") VALUES (NEW."case_id", NEW."comment", NEW."created_at", NEW."created_by_id", NEW."event_id", NEW."folder_id", NEW."hearing_id", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", NEW."notation_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."task_id"); RETURN NULL;', hash='28449a6f7c2055a5918ba3024c99ced5be36c27a', operation='UPDATE', pgid='pgtrigger_snapshot_update_eb534', table='core_comments', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='documents',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "core_documentsevent" ("attachment", "case_id", "created_at", "created_by_id", "folder_id", "hearing_id", "id", "is_deleted", "modified_at", "modified_by_id", "name", "path_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "task_id") VALUES (NEW."attachment", NEW."case_id", NEW."created_at", NEW."created_by_id", NEW."folder_id", NEW."hearing_id", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", NEW."name", NEW."path_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."task_id"); RETURN NULL;', hash='fc4302da9e31d7b246c099bdd9ebf2275d579d08', operation='INSERT', pgid='pgtrigger_snapshot_insert_49b87', table='core_documents', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='documents',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "core_documentsevent" ("attachment", "case_id", "created_at", "created_by_id", "folder_id", "hearing_id", "id", "is_deleted", "modified_at", "modified_by_id", "name", "path_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "task_id") VALUES (NEW."attachment", NEW."case_id", NEW."created_at", NEW."created_by_id", NEW."folder_id", NEW."hearing_id", NEW."id", NEW."is_deleted", NEW."modified_at", NEW."modified_by_id", NEW."name", NEW."path_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."task_id"); RETURN NULL;', hash='042fa1672080abf3720708933caab761a3d636cb', operation='UPDATE', pgid='pgtrigger_snapshot_update_c495f', table='core_documents', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='notification',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "core_notificationevent" ("action", "action_at", "action_by_id", "browser_read", "content_type_id", "created_by_id", "id", "is_deleted", "is_read", "object_id", "object_name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "role", "user_id") VALUES (NEW."action", NEW."action_at", NEW."action_by_id", NEW."browser_read", NEW."content_type_id", NEW."created_by_id", NEW."id", NEW."is_deleted", NEW."is_read", NEW."object_id", NEW."object_name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."role", NEW."user_id"); RETURN NULL;', hash='f2861f6a542df3cd8f9754b2a50adecb8fe7a918', operation='INSERT', pgid='pgtrigger_snapshot_insert_c38ef', table='core_notification', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='notification',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "core_notificationevent" ("action", "action_at", "action_by_id", "browser_read", "content_type_id", "created_by_id", "id", "is_deleted", "is_read", "object_id", "object_name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "role", "user_id") VALUES (NEW."action", NEW."action_at", NEW."action_by_id", NEW."browser_read", NEW."content_type_id", NEW."created_by_id", NEW."id", NEW."is_deleted", NEW."is_read", NEW."object_id", NEW."object_name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."role", NEW."user_id"); RETURN NULL;', hash='494c91e1f4ee945dc1ed2e9b3662d30933a3de6a', operation='UPDATE', pgid='pgtrigger_snapshot_update_be18e', table='core_notification', when='AFTER')),
        ),
        migrations.DeleteModel(
            name='PathEvent',
        ),
    ]
