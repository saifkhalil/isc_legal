openapi: 3.0.3
info:
  title: ISC Legal App
  version: '0.3'
  description: ISC Legal App
  contact:
    name: Saif AlKhateeb
    email: saif.ibrahim@qi.iq
paths:
  /api/activities/hearing/:
    get:
      operationId: api_activities_hearing_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedhearingList'
          description: ''
    post:
      operationId: api_activities_hearing_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/hearing'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/hearing'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/hearing'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hearing'
          description: ''
  /api/activities/hearing/{id}/:
    get:
      operationId: api_activities_hearing_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Hearing.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hearing'
          description: ''
    put:
      operationId: api_activities_hearing_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Hearing.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/hearing'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/hearing'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/hearing'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hearing'
          description: ''
    patch:
      operationId: api_activities_hearing_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Hearing.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patchedhearing'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Patchedhearing'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Patchedhearing'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hearing'
          description: ''
    delete:
      operationId: api_activities_hearing_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Hearing.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/activities/task/:
    get:
      operationId: api_activities_task_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedtaskList'
          description: ''
    post:
      operationId: api_activities_task_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/task'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/task'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
          description: ''
  /api/activities/task/{id}/:
    get:
      operationId: api_activities_task_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Task.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
          description: ''
    put:
      operationId: api_activities_task_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Task.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/task'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/task'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
          description: ''
    patch:
      operationId: api_activities_task_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Task.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patchedtask'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Patchedtask'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Patchedtask'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
          description: ''
    delete:
      operationId: api_activities_task_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Task.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/auth/token/login/:
    post:
      operationId: api_auth_token_login_create
      description: Use this endpoint to obtain user authentication token.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenCreate'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenCreate'
          description: ''
  /api/auth/token/logout/:
    post:
      operationId: api_auth_token_logout_create
      description: Use this endpoint to logout user (remove user authentication token).
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/auth/users/:
    get:
      operationId: api_auth_users_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: api_auth_users_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
  /api/auth/users/{id}/:
    get:
      operationId: api_auth_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_auth_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: api_auth_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: api_auth_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/auth/users/activation/:
    post:
      operationId: api_auth_users_activation_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Activation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Activation'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
          description: ''
  /api/auth/users/me/:
    get:
      operationId: api_auth_users_me_retrieve
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_auth_users_me_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: api_auth_users_me_partial_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: api_auth_users_me_destroy
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/auth/users/resend_activation/:
    post:
      operationId: api_auth_users_resend_activation_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/auth/users/reset_email/:
    post:
      operationId: api_auth_users_reset_email_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/auth/users/reset_email_confirm/:
    post:
      operationId: api_auth_users_reset_email_confirm_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameResetConfirm'
          description: ''
  /api/auth/users/reset_password/:
    post:
      operationId: api_auth_users_reset_password_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/auth/users/reset_password_confirm/:
    post:
      operationId: api_auth_users_reset_password_confirm_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
  /api/auth/users/set_email/:
    post:
      operationId: api_auth_users_set_email_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUsername'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetUsername'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetUsername'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUsername'
          description: ''
  /api/auth/users/set_password/:
    post:
      operationId: api_auth_users_set_password_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetPassword'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPassword'
          description: ''
  /api/cases/case_type/:
    get:
      operationId: api_cases_case_type_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paginatedcase_typeList'
          description: ''
    post:
      operationId: api_cases_case_type_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/case_type'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/case_type'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/case_type'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/case_type'
          description: ''
  /api/cases/case_type/{id}/:
    get:
      operationId: api_cases_case_type_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Practice Area.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/case_type'
          description: ''
    put:
      operationId: api_cases_case_type_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Practice Area.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/case_type'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/case_type'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/case_type'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/case_type'
          description: ''
    patch:
      operationId: api_cases_case_type_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Practice Area.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patchedcase_type'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Patchedcase_type'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Patchedcase_type'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/case_type'
          description: ''
    delete:
      operationId: api_cases_case_type_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Practice Area.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/cases/litigationcases/:
    get:
      operationId: api_cases_litigationcases_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLitigationCasesList'
          description: ''
    post:
      operationId: api_cases_litigationcases_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LitigationCases'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LitigationCases'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LitigationCases'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LitigationCases'
          description: ''
  /api/cases/litigationcases/{id}/:
    get:
      operationId: api_cases_litigationcases_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Litigation Case.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LitigationCases'
          description: ''
    put:
      operationId: api_cases_litigationcases_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Litigation Case.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LitigationCases'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LitigationCases'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LitigationCases'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LitigationCases'
          description: ''
    patch:
      operationId: api_cases_litigationcases_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Litigation Case.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLitigationCases'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLitigationCases'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLitigationCases'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LitigationCases'
          description: ''
    delete:
      operationId: api_cases_litigationcases_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Litigation Case.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/cases/stages/:
    get:
      operationId: api_cases_stages_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedstagesList'
          description: ''
    post:
      operationId: api_cases_stages_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stages'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/stages'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/stages'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stages'
          description: ''
  /api/cases/stages/{id}/:
    get:
      operationId: api_cases_stages_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Stage.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stages'
          description: ''
    put:
      operationId: api_cases_stages_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Stage.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stages'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/stages'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/stages'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stages'
          description: ''
    patch:
      operationId: api_cases_stages_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Stage.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patchedstages'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Patchedstages'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Patchedstages'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stages'
          description: ''
    delete:
      operationId: api_cases_stages_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Stage.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/comments/:
    get:
      operationId: api_comments_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCommentsList'
          description: ''
    post:
      operationId: api_comments_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comments'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comments'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comments'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
          description: ''
  /api/comments/{id}/:
    get:
      operationId: api_comments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Comment.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
          description: ''
    put:
      operationId: api_comments_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Comment.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comments'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comments'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comments'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
          description: ''
    patch:
      operationId: api_comments_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Comment.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedComments'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedComments'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedComments'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
          description: ''
    delete:
      operationId: api_comments_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Comment.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/groups/:
    get:
      operationId: api_groups_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGroupList'
          description: ''
    post:
      operationId: api_groups_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Group'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
  /api/groups/{id}/:
    get:
      operationId: api_groups_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this group.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
    put:
      operationId: api_groups_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this group.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Group'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
    patch:
      operationId: api_groups_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this group.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGroup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGroup'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGroup'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
    delete:
      operationId: api_groups_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this group.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/jwt/:
    post:
      operationId: api_jwt_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/jwt/refresh/:
    post:
      operationId: api_jwt_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/jwt/verify/:
    post:
      operationId: api_jwt_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/replies/:
    get:
      operationId: api_replies_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedrepliesList'
          description: ''
    post:
      operationId: api_replies_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/replies'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/replies'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/replies'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/replies'
          description: ''
  /api/replies/{id}/:
    get:
      operationId: api_replies_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Reply.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/replies'
          description: ''
    put:
      operationId: api_replies_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Reply.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/replies'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/replies'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/replies'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/replies'
          description: ''
    patch:
      operationId: api_replies_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Reply.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patchedreplies'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Patchedreplies'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Patchedreplies'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/replies'
          description: ''
    delete:
      operationId: api_replies_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Reply.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
      - token
      - uid
    CaseCategoryEnum:
      enum:
      - Public
      - Private
      type: string
    Comments:
      type: object
      description: |-
        A serializer mixin that takes an additional `fields` argument that controls
        which fields should be displayed.
      properties:
        id:
          type: integer
          readOnly: true
        comment:
          type: string
        replies:
          type: array
          items:
            $ref: '#/components/schemas/replies'
        case_id:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          nullable: true
        event_id:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          nullable: true
        task_id:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          nullable: true
        hearing_id:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          nullable: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        modified_by:
          type: integer
          readOnly: true
          nullable: true
        modified_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - comment
      - created_at
      - created_by
      - id
      - modified_at
      - modified_by
      - replies
    Group:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        name:
          type: string
          maxLength: 150
      required:
      - name
      - url
    LitigationCases:
      type: object
      description: |-
        A serializer mixin that takes an additional `fields` argument that controls
        which fields should be displayed.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Title
          maxLength: 500
        description:
          type: string
          nullable: true
          title: Subject
          maxLength: 500
        case_category:
          $ref: '#/components/schemas/CaseCategoryEnum'
        case_type:
          type: integer
          nullable: true
        judge:
          type: string
          nullable: true
          title: Judge Name
          maxLength: 500
        detective:
          type: string
          nullable: true
          maxLength: 500
        client_position:
          type: integer
          nullable: true
        opponent_position:
          type: integer
          nullable: true
        assignee:
          type: integer
          nullable: true
        Stage:
          type: integer
          nullable: true
        internal_ref_number:
          type: string
          nullable: true
          maxLength: 50
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comments'
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
      required:
      - comments
      - end_time
      - id
      - name
      - start_time
    PaginatedCommentsList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Comments'
    PaginatedGroupList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Group'
    PaginatedLitigationCasesList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/LitigationCases'
    PaginatedUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Paginatedcase_typeList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/case_type'
    PaginatedhearingList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/hearing'
    PaginatedrepliesList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/replies'
    PaginatedstagesList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/stages'
    PaginatedtaskList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/task'
    PasswordResetConfirm:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
      required:
      - new_password
      - token
      - uid
    PatchedComments:
      type: object
      description: |-
        A serializer mixin that takes an additional `fields` argument that controls
        which fields should be displayed.
      properties:
        id:
          type: integer
          readOnly: true
        comment:
          type: string
        replies:
          type: array
          items:
            $ref: '#/components/schemas/replies'
        case_id:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          nullable: true
        event_id:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          nullable: true
        task_id:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          nullable: true
        hearing_id:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          nullable: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        modified_by:
          type: integer
          readOnly: true
          nullable: true
        modified_at:
          type: string
          format: date-time
          readOnly: true
    PatchedGroup:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        name:
          type: string
          maxLength: 150
    PatchedLitigationCases:
      type: object
      description: |-
        A serializer mixin that takes an additional `fields` argument that controls
        which fields should be displayed.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Title
          maxLength: 500
        description:
          type: string
          nullable: true
          title: Subject
          maxLength: 500
        case_category:
          $ref: '#/components/schemas/CaseCategoryEnum'
        case_type:
          type: integer
          nullable: true
        judge:
          type: string
          nullable: true
          title: Judge Name
          maxLength: 500
        detective:
          type: string
          nullable: true
          maxLength: 500
        client_position:
          type: integer
          nullable: true
        opponent_position:
          type: integer
          nullable: true
        assignee:
          type: integer
          nullable: true
        Stage:
          type: integer
          nullable: true
        internal_ref_number:
          type: string
          nullable: true
          maxLength: 50
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comments'
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
    PatchedUser:
      type: object
      properties:
        username:
          type: string
          maxLength: 30
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
    Patchedcase_type:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        type:
          type: string
          title: Name
          maxLength: 250
    Patchedhearing:
      type: object
      description: |-
        A serializer mixin that takes an additional `fields` argument that controls
        which fields should be displayed.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 250
        hearing_date:
          type: string
          format: date-time
        assignee:
          type: array
          items:
            type: integer
        comments:
          type: array
          items:
            type: integer
    Patchedreplies:
      type: object
      description: |-
        A serializer mixin that takes an additional `fields` argument that controls
        which fields should be displayed.
      properties:
        id:
          type: integer
          readOnly: true
        reply:
          type: string
          maxLength: 250
        comment_id:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          nullable: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        modified_by:
          type: integer
          readOnly: true
          nullable: true
        modified_at:
          type: string
          format: date-time
          readOnly: true
    Patchedstages:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 250
    Patchedtask:
      type: object
      description: |-
        A serializer mixin that takes an additional `fields` argument that controls
        which fields should be displayed.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 250
        description:
          type: string
          title: Task Description
          maxLength: 250
        assigned_to:
          type: integer
        due_date:
          type: string
          format: date
        comments:
          type: array
          items:
            type: integer
    SendEmailReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    SetPassword:
      type: object
      properties:
        new_password:
          type: string
        current_password:
          type: string
      required:
      - current_password
      - new_password
    SetUsername:
      type: object
      properties:
        current_password:
          type: string
        new_email:
          type: string
          format: email
          title: Email
          maxLength: 60
      required:
      - current_password
      - new_email
    TokenCreate:
      type: object
      properties:
        password:
          type: string
        email:
          type: string
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    User:
      type: object
      properties:
        username:
          type: string
          maxLength: 30
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
      required:
      - email
      - id
      - username
    UserCreate:
      type: object
      properties:
        username:
          type: string
          maxLength: 30
        email:
          type: string
          format: email
          maxLength: 60
        id:
          type: integer
          readOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - id
      - password
      - username
    UsernameResetConfirm:
      type: object
      properties:
        new_email:
          type: string
          format: email
          title: Email
          maxLength: 60
      required:
      - new_email
    case_type:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        type:
          type: string
          title: Name
          maxLength: 250
      required:
      - id
      - type
    hearing:
      type: object
      description: |-
        A serializer mixin that takes an additional `fields` argument that controls
        which fields should be displayed.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 250
        hearing_date:
          type: string
          format: date-time
        assignee:
          type: array
          items:
            type: integer
        comments:
          type: array
          items:
            type: integer
      required:
      - assignee
      - hearing_date
      - id
      - name
    replies:
      type: object
      description: |-
        A serializer mixin that takes an additional `fields` argument that controls
        which fields should be displayed.
      properties:
        id:
          type: integer
          readOnly: true
        reply:
          type: string
          maxLength: 250
        comment_id:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          nullable: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        modified_by:
          type: integer
          readOnly: true
          nullable: true
        modified_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - created_by
      - id
      - modified_at
      - modified_by
      - reply
    stages:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 250
      required:
      - id
      - name
    task:
      type: object
      description: |-
        A serializer mixin that takes an additional `fields` argument that controls
        which fields should be displayed.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 250
        description:
          type: string
          title: Task Description
          maxLength: 250
        assigned_to:
          type: integer
        due_date:
          type: string
          format: date
        comments:
          type: array
          items:
            type: integer
      required:
      - assigned_to
      - due_date
      - id
      - name
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
